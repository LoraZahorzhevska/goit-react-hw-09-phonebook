{"version":3,"sources":["views/RegisterView.js"],"names":["styles","form","width","label","display","flexDirection","marginBottom","RegisterView","dispatch","useDispatch","useState","name","email","password","state","setState","handleChange","useCallback","e","currentTarget","value","prev","className","onSubmit","preventDefault","authOperations","register","style","autoComplete","type","onChange","variant"],"mappings":"gSAMMA,EAAS,CACbC,KAAM,CACJC,MAAO,KAETC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,KAIH,SAASC,IACtB,IAAMC,EAAWC,cAOjB,EAA0BC,mBALL,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,KAEZ,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAeC,uBAAY,SAAAC,GAC/B,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACdL,GAAS,SAAAM,GAAI,kCACRA,GADQ,kBAEVV,EAAOS,SAET,IAQKT,EAA0BG,EAA1BH,KAAMC,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAErB,OACE,qBAAKS,UAAU,oBAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,gBAAd,0BACA,uBAAMC,SAZS,SAAAL,GACnBA,EAAEM,iBACFhB,EAASiB,IAAeC,SAASZ,IACjCC,EAAS,CAAEJ,KAAM,GAAIC,MAAO,GAAIC,SAAU,MASRc,MAAO3B,EAAOC,KAAM2B,aAAa,MAA/D,UACE,wBAAOD,MAAO3B,EAAOG,MAArB,+BAEE,uBACE0B,KAAK,OACLlB,KAAK,OACLS,MAAOT,EACPmB,SAAUd,OAGd,wBAAOW,MAAO3B,EAAOG,MAArB,2CAEE,uBACE0B,KAAK,QACLlB,KAAK,QACLS,MAAOR,EACPkB,SAAUd,OAGd,wBAAOW,MAAO3B,EAAOG,MAArB,iDAEE,uBACE0B,KAAK,WACLlB,KAAK,WACLS,MAAOP,EACPiB,SAAUd,OAGd,cAAC,IAAD,CAAQa,KAAK,SAASE,QAAQ,YAA9B","file":"static/js/register-view.d8b36aa9.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport './Views.css';\nimport { Button } from '@material-ui/core';\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'Flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nexport default function RegisterView() {\n  const dispatch = useDispatch();\n\n  const initialState = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const [state, setState] = useState(initialState);\n\n  const handleChange = useCallback(e => {\n    const { name, value } = e.currentTarget;\n    setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register(state));\n    setState({ name: '', email: '', password: '' });\n  };\n\n  const { name, email, password } = state;\n\n  return (\n    <div className=\"RegisterContainer\">\n      <div className=\"RegisterSection\">\n        <h1 className=\"RegisterTitle\">Registration</h1>\n        <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n          <label style={styles.label}>\n            Имя\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n            />\n          </label>\n          <label style={styles.label}>\n            Почта\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleChange}\n            />\n          </label>\n          <label style={styles.label}>\n            Пароль\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleChange}\n            />\n          </label>\n          <Button type=\"submit\" variant=\"contained\">\n            Зарегистрироваться\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\n// const mapDispatchToProps = {\n//   onRegister: authOperations.register,\n// };\n\n// class RegisterView extends Component {\n//   state = {\n//     name: '',\n//     email: '',\n//     password: '',\n//   };\n\n//   handleChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onRegister(this.state);\n\n//     this.setState({ name: '', email: '', password: '' });\n//   };\n\n//   render() {\n//     const { name, email, password } = this.state;\n\n//     return (\n//       <div className=\"RegisterContainer\">\n//         <div className=\"RegisterSection\">\n//           <h1 className=\"RegisterTitle\">Registration</h1>\n//           <form\n//             onSubmit={this.handleSubmit}\n//             style={styles.form}\n//             autoComplete=\"off\"\n//           >\n//             <label style={styles.label}>\n//               Имя\n//               <input\n//                 type=\"text\"\n//                 name=\"name\"\n//                 value={name}\n//                 onChange={this.handleChange}\n//               />\n//             </label>\n//             <label style={styles.label}>\n//               Почта\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={email}\n//                 onChange={this.handleChange}\n//               />\n//             </label>\n//             <label style={styles.label}>\n//               Пароль\n//               <input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 value={password}\n//                 onChange={this.handleChange}\n//               />\n//             </label>\n//             <Button type=\"submit\" variant=\"contained\">\n//               Зарегистрироваться\n//             </Button>\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// // const mapDispatchToProps = {\n// //   onRegister: authOperations.register,\n// // };\n// //то же самое, что:\n// const mapDispatchToProps = dispatch => ({\n//   onRegister: data => dispatch(authOperations.register(data)),\n// });\n\n// export default connect(null, mapDispatchToProps)(RegisterView);\n"],"sourceRoot":""}