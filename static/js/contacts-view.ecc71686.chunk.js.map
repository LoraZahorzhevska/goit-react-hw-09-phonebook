{"version":3,"sources":["Component/ContactForm/ContactForm.module.css","Component/Filter/Filter.module.css","Component/ElementContactList/ElementContactList.module.css","Component/ContactList/ContactList.module.css","../node_modules/uuid/dist/esm-browser/rng.js","redux/phonebook/phonebook-operations.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","Component/ContactForm/ContactForm.js","redux/phonebook/phonebook-selectors.js","Component/Filter/Filter.js","Component/ElementContactList/ElementContactList.js","Component/ContactList/ContactList.js","views/ContactsView.js"],"names":["module","exports","getRandomValues","fetchContacts","dispatch","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","ContactForm","useDispatch","nameInputId","uuidv4","numberInputId","useState","name","number","state","setState","handleChange","useCallback","e","currentTarget","value","prev","handleSubmit","preventDefault","alert","contact","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","addContact","reset","onSubmit","className","styles","contacts_form","htmlFor","label","type","pattern","title","required","onChange","id","input","form_button","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","includes","Filter","useSelector","changeFilter","target","ElementContactList","contact_name","contact_number","ContactList","useEffect","isLoadingContacts","contact_list","map","contact_item","onClick","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","item_button","ContactsView","Container"],"mappings":"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","file":"static/js/contacts-view.ecc71686.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts_form\":\"ContactForm_contacts_form__3j3QC\",\"form_button\":\"ContactForm_form_button__W-a64\",\"label\":\"ContactForm_label__2MWyz\",\"input\":\"ContactForm_input__2Z1VO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend_list\":\"Filter_friend_list__X9GhR\",\"item\":\"Filter_item__lYfuJ\",\"avatar\":\"Filter_avatar__mEENG\",\"name\":\"Filter_name__Fi1Rp\",\"status_isOnline\":\"Filter_status_isOnline__tUcq4\",\"status_isOffline\":\"Filter_status_isOffline__3uHi1\",\"label\":\"Filter_label__1Vskc\",\"input\":\"Filter_input__3x5yM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_name\":\"ElementContactList_contact_name__2jA-P\",\"contact_number\":\"ElementContactList_contact_number__3CI8_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1kEIU\",\"contact_item\":\"ContactList_contact_item__NGqdX\",\"item_button\":\"ContactList_item_button__m07wo\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './phonebook-action';\n\n// axios.defaults.baseURL = 'http://localhost:4040';\n// ---------------------------async-await-------------------------\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n};\n// -----------------then-cath----------------------------------\n// export const fetchContacts = () => dispatch => {\n//   dispatch(fetchContactRequest());\n\n//   axios\n//     .get('/contacts')\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n//     .catch(error => dispatch(fetchContactError(error)));\n// };\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const initialState = {\n    name: '',\n    number: '',\n  };\n  const [state, setState] = useState(initialState);\n\n  /** Отвечает за обновление состояния*/\n  const handleChange = useCallback(e => {\n    const { name, value } = e.currentTarget;\n    setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  }, []);\n  /** Вызывается при отправке формы */\n  // Проп который передается форме для вызова при сабмите\n\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      const { name, number } = state;\n      if (name === '' && number === '') {\n        return alert('Please fill empty fields');\n      }\n      dispatch(addContact(name, number));\n      reset();\n      return;\n    },\n    [dispatch, state],\n  );\n\n  const reset = () => {\n    setState({ name: '', number: '' });\n  };\n\n  const { name, number } = state;\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={styles.contacts_form}>\n        <div>\n          <label htmlFor={nameInputId} className={styles.label}>\n            Name\n            <input\n              type=\"text\"\n              value={name}\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={handleChange}\n              id={nameInputId}\n              className={styles.input}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor={numberInputId} className={styles.label}>\n            Number\n            <input\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              onChange={handleChange}\n              id={numberInputId}\n              className={styles.input}\n            />\n          </label>\n        </div>\n\n        <button type=\"submit\" className={styles.form_button}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = uuidv4();\n//   numberInputId = uuidv4();\n\n//   /** Отвечает за обновление состояния*/\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n//   /** Вызывается при отправке формы */\n//   // Проп который передается форме для вызова при сабмите\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { name, number } = this.state;\n//     if (name !== '' && number !== '') {\n//       this.props.onSubmit(name, number);\n//       this.reset();\n//       return;\n//     }\n//     alert('Please fill empty fields');\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <>\n//         <form onSubmit={this.handleSubmit} className={styles.contacts_form}>\n//           <div>\n//             <label htmlFor={this.nameInputId} className={styles.label}>\n//               Name\n//               <input\n//                 type=\"text\"\n//                 value={name}\n//                 name=\"name\"\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//                 required\n//                 onChange={this.handleChange}\n//                 id={this.nameInputId}\n//                 className={styles.input}\n//               />\n//             </label>\n//           </div>\n//           <div>\n//             <label htmlFor={this.numberInputId} className={styles.label}>\n//               Number\n//               <input\n//                 type=\"tel\"\n//                 value={number}\n//                 name=\"number\"\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                 title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//                 required\n//                 onChange={this.handleChange}\n//                 id={this.numberInputId}\n//                 className={styles.input}\n//               />\n//             </label>\n//           </div>\n\n//           <button type=\"submit\" className={styles.form_button}>\n//             Add contact\n//           </button>\n//         </form>\n//       </>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\n// });\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getAllContacts = state => state.contacts.items;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getAllContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n//--------используем мемоизацию:\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React, { useCallback } from 'react';\nimport styles from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/phonebook-action';\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  // что бы onChange не ререндилась каждый раз, можно делать через useCallback\n  // const onChange = e => dispatch(changeFilter(e.target.value));\n  const onChange = useCallback(\n    e => {\n      dispatch(changeFilter(e.target.value));\n    },\n    [dispatch],\n  );\n\n  return (\n    <label className={styles.label}>\n      Find contact by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={styles.input}\n      />\n    </label>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../ElementContactList/ElementContactList.module.css';\n\nconst ElementContactList = ({ name, number }) => {\n  return (\n    <>\n      <span className={styles.contact_name}>{name}: </span>\n      <span className={styles.contact_number}>{number}</span>\n    </>\n  );\n};\n\nElementContactList.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ElementContactList;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook/phonebook-operations';\nimport ElementContactList from '../ElementContactList/ElementContactList';\nimport styles from './ContactList.module.css';\nimport { fetchContacts } from '../../redux/phonebook/phonebook-operations';\nimport {\n  getLoading,\n  getVisibleContacts,\n} from '../../redux/phonebook/phonebook-selectors';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  //   componentDidMount() {\n  //     this.props.onfetchContacts();\n  //   }\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getVisibleContacts);\n  const isLoadingContacts = useSelector(getLoading);\n  // const mapStateToProps = state => ({\n  //   contacts: getVisibleContacts(state),\n  //   isLoadingContacts: getLoading(state),\n  // });\n\n  // const mapDispatchToProps = dispatch => ({\n  //   onClick: id => dispatch(deleteContact(id)),\n  //   onfetchContacts: () => dispatch(fetchContacts()),  // });\n\n  return (\n    <>\n      {isLoadingContacts && <h1>....Загружаем</h1>}\n\n      <ul className={styles.contact_list}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={styles.contact_item}>\n            <ElementContactList name={name} number={number} />\n            <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n              className={styles.item_button}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\n// class ContactList extends Component {\n//   componentDidMount() {\n//     this.props.onfetchContacts();\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         {this.props.isLoadingContacts && <h1>....Загружаем</h1>}\n\n//         <ul className={styles.contact_list}>\n//           {this.props.contacts.map(({ id, name, number }) => (\n//             <li key={id} className={styles.contact_item}>\n//               <ElementContactList name={name} number={number} />\n//               <button\n//                 type=\"button\"\n//                 onClick={() => {\n//                   this.props.onClick(id);\n//                 }}\n//                 className={styles.item_button}\n//               >\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: getVisibleContacts(state),\n//   isLoadingContacts: getLoading(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onClick: id => dispatch(deleteContact(id)),\n//   onfetchContacts: () => dispatch(fetchContacts()),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Container from '../Component/Container';\nimport ContactForm from '../Component/ContactForm';\nimport Filter from '../Component/Filter';\nimport ContactList from '../Component/ContactList';\nimport { fetchContacts } from '../redux/phonebook/phonebook-operations';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        <ContactList />\n      </div>\n    </Container>\n  );\n}\n\n//   class ContactsView extends React.Component {\n//   // componentDidMount() {\n//   //   this.props.onFetchContacts();\n//   // }\n//   render() {\n//     return (\n//       <Container>\n//         <div>\n//           <h1>Phonebook</h1>\n//           <ContactForm />\n\n//           <h2>Contacts</h2>\n//           <Filter />\n\n//           <ContactList />\n//         </div>\n//       </Container>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => ({\n//   onFetchContacts: () => dispatch(fetchContacts()),\n// });\n//export default ContactsView;\n"],"sourceRoot":""}